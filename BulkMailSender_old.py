# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainScreen.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog 

import string
from docx import Document
import pandas as pd
from docx2pdf import convert
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.base import MIMEBase
from email import encoders
import os
import time

class Ui_MainWindow(object):
    def setupUi(self, MainWindow,btn_val,gb_val,title_name,mail_subject,mail_body,all_text_color,send_button_text_color,wait_time):
        self.mail_body = mail_body
        self.mail_subject= mail_subject
        self.all_text_color = all_text_color
        self.send_button_text_color = send_button_text_color
        self.wait_time = wait_time
        self.background_color_value = gb_val
        self.background_color = "background-color: rgb%s;"%(self.background_color_value)


        self.button_color_value = btn_val
        self.button_color = "background-color: rgb%s;"%(self.button_color_value)

        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.frame = QtWidgets.QFrame(self.centralwidget)

        # self.frame.setStyleSheet("background-color: rgb(170, 255, 255);")
        self.frame.setStyleSheet(self.background_color)

        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.lineEdit = QtWidgets.QLineEdit(self.frame)
        self.lineEdit.setGeometry(QtCore.QRect(250, 130, 201, 31))
        self.lineEdit.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lineEdit.setObjectName("lineEdit")
        self.toolButton = QtWidgets.QToolButton(self.frame)
        self.toolButton.setGeometry(QtCore.QRect(460, 130, 50, 31))
        self.toolButton.setObjectName("toolButton")
        self.toolButton.clicked.connect(self.exl_path)
        self.lineEdit_3 = QtWidgets.QLineEdit(self.frame)
        self.lineEdit_3.setGeometry(QtCore.QRect(250, 210, 201, 31))
        self.lineEdit_3.setStyleSheet("background-color: rgb(255, 255, 255);")
        self.lineEdit_3.setObjectName("lineEdit_3")
        self.toolButton_3 = QtWidgets.QToolButton(self.frame)
        self.toolButton_3.setGeometry(QtCore.QRect(460, 210, 50, 31))
        self.toolButton_3.setObjectName("toolButton_3")
        self.toolButton_3.clicked.connect(self.output_path)
        self.pushButton = QtWidgets.QPushButton(self.frame)
        self.pushButton.setGeometry(QtCore.QRect(240, 400, 261, 51))
        # self.pushButton.setStyleSheet("background-color: rgb(0, 255, 0);")
        self.pushButton.setStyleSheet(self.button_color)

        self.pushButton.setObjectName("pushButton")
        self.label = QtWidgets.QLabel(self.frame)
        self.label.setGeometry(QtCore.QRect(70, 130, 131, 31))
        self.label.setStyleSheet("font: 75 11pt \"MS Shell Dlg 2\";")
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.frame)
        self.label_2.setGeometry(QtCore.QRect(70, 210, 181, 31))
        self.label_2.setStyleSheet("font: 75 11pt \"MS Shell Dlg 2\";")
        self.label_2.setObjectName("label_2")
        self.label_3 = QtWidgets.QLabel(self.frame)
        self.label_3.setGeometry(QtCore.QRect(70, 290, 141, 31))
        self.label_3.setStyleSheet("font: 75 11pt \"MS Shell Dlg 2\";")
        self.label_3.setObjectName("label_3")
        self.label_4 = QtWidgets.QLabel(self.frame)
        self.label_4.setGeometry(QtCore.QRect(240, 30, 291, 71))

        self.label_8 = QtWidgets.QLabel(self.frame)
        self.label_8.setGeometry(QtCore.QRect(70, 350, 141, 31))
        self.label_8.setStyleSheet("font: 75 11pt \"MS Shell Dlg 2\";")
        self.label_8.setObjectName("label_8")

    
        self.toolButton_8 = QtWidgets.QToolButton(self.frame)
        self.toolButton_8.setGeometry(QtCore.QRect(250, 350, 50, 31))
        self.toolButton_8.setObjectName("toolButton_8")
        # self.toolButton_8.clicked.connect(self.show_config_file)

        font = QtGui.QFont()
        font.setPointSize(12)
        font.setBold(True)
        font.setWeight(75)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")

        ###
        self.label_4.setText(title_name)
        self.comboBox = QtWidgets.QComboBox(self.frame)
        self.comboBox.setGeometry(QtCore.QRect(250, 280, 251, 22))
        # self.comboBox.setCurrentText("")
        # self.comboBox.addItem("Name")
        # self.comboBox.addItem("Salary")
        # self.comboBox.addItem("Position")
        # self.comboBox.addItem("Email")
        self.comboBox.setObjectName("comboBox")
        self.gridLayout.addWidget(self.frame, 0, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        self.exl_file_path = None
        self.output_folder_path = None

    def retranslateUi(self, MainWindow,):
        
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.toolButton.setText(_translate("MainWindow", "Browse"))
        self.toolButton_3.setText(_translate("MainWindow", "Browse"))
        self.toolButton_8.setText(_translate("MainWindow", "Open"))
        self.toolButton_8.clicked.connect(self.ChangeSettings)
        self.pushButton.setText(_translate("MainWindow", "Send"))
        send_button_text_color = 'QPushButton {color: rgb%s;}'%(self.send_button_text_color)
        self.pushButton.setStyleSheet(send_button_text_color)
        self.pushButton.clicked.connect(self.Send_button)
        self.label.setText(_translate("MainWindow", "Select Exel Sheet :"))
        self.label_2.setText(_translate("MainWindow", "Select Outputl Folder"))
        self.label_3.setText(_translate("MainWindow", "Select File Name"))
        self.label_8.setText(_translate("MainWindow", "Change Settings"))

        
        # self.label_4.setText(_translate("MainWindow", "Email Notification Sender"))

    def ChangeSettings(self):
        print("Changing Setting")
        # osCommandString = "notepad.exe Config_file.txt"
        # os.system(osCommandString)

        # os.startfile('Config_file.txt')
        import subprocess
        subprocess.call(['notepad.exe', 'Config_file.txt'])

    def exl_path(self):
        print("Exl path Button")
        files, _ = QFileDialog.getOpenFileName(None, "Open File", "", "PDF Files (*.xlsx)")
        self.exl_file_path = str(files)
        self.lineEdit.setText(self.exl_file_path)
        value = self.comboBox.currentText()
        print(value)

        print(self.exl_file_path)


        data = pd.read_excel(self.exl_file_path)
        
        all_columns = data.columns
        self.comboBox.setCurrentText("")
        for val in all_columns:
            self.comboBox.addItem(str(val))
        
        # self.lineEdit.setText(QFileDialog.getOpenFileName(None, "Open File", "Desktop", "Excel Workshee (*.xlsx)"))

    def output_path(self):
        print("output file button is clicked")
        file =QFileDialog.getExistingDirectory(None, "Select Folder")
        self.output_folder_path=str(file)
        self.lineEdit_3.setText(self.output_folder_path)
        print(self.output_folder_path)





    def sendMail(self,pdf_file_to_send,send_to,user_name):
        #start
        # body = '''Hey %s,
        # Please Check the message below
        # '''%(user_name)
        body = self.mail_body

        # put your email here
        sender = lines[3].strip()
        sender = sender.split("=")[1]

        password = lines[4].strip()
        password = password.split("=")[1]

        receiver = send_to
        
        #Setup the MIME
        message = MIMEMultipart()
        message['From'] = sender
        message['To'] = receiver
        # message['Subject'] = 'Promotion Notification'
        message['Subject'] = self.mail_subject
        
        message.attach(MIMEText(body, 'plain'))
        
        pdfname = user_name+".pdf"
        
        # open the file in bynary
        binary_pdf = open(pdf_file_to_send, 'rb')
        
        payload = MIMEBase('application', 'octate-stream', Name=pdfname)
        # payload = MIMEBase('application', 'pdf', Name=pdfname)
        payload.set_payload((binary_pdf).read())
        
        # enconding the binary into base64
        encoders.encode_base64(payload)
        
        # add header with pdf name
        payload.add_header('Content-Decomposition', 'attachment', filename=pdfname)
        message.attach(payload)
        
        #use gmail with port
        session = smtplib.SMTP('smtp.gmail.com', 587)
        
        #enable security
        session.starttls()
        
        #login with mail_id and password
        session.login(sender, password)
        
        text = message.as_string()
        session.sendmail(sender, receiver, text)
        session.quit()
        print('Mail Sent')

    def ch_var(salf,name,salary,position):
        #start
        sample_page = Document("tempalate.docx")
        dic = {
            '[NAME]':name,
            '[POST]':position,
            '[SALARY]' : salary,
        }
        for p in sample_page.paragraphs:
            inline = p.runs
            for i in range(len(inline)):
                text = inline[i].text
                for key in dic.keys():
                    if key in text:
                        text=text.replace(key,dic[key])
                        inline[i].text = text
        return sample_page
    #end       

    def Send_button(self):
        print("Starting to send Emails.")  
        # data = pd.read_excel('Book1.xlsx')
        if self.exl_file_path !=None: 
            print(self.exl_file_path)
            data = pd.read_excel(self.exl_file_path)
        else:
            print("Please Select Excel file first.")
            return
        
        if self.output_folder_path !=None: 
            print("output folder is set.")
            print(self.output_folder_path)
        else:
            print("Please Select output fodler.")
            return

        user_name = ""
        # getting the names and the emails
        names = data['Name']
        emails = data['Email']
        salarys=data['Salry']
        positions=data['Position']

        value = self.comboBox.currentText()


        #here
        for i in range(len(emails)):
            try:
                # for every record get the name and the email addresses
                
                n = names[i]
                n = str(n)
                if 'nan' in n or 'NaN' in n:
                    n = "unknown"

                e = emails[i]
                email=str(e)
                if 'nan' in email or 'NaN' in email:
                    email = "unknown"
                print(email)

                position= positions[i]
                position = str(position)
                if 'nan' in position or 'NaN' in position:
                    position = "unknown"

                sal= salarys[i]
                salary=str(sal)
                if 'nan' in salary or 'NaN' in salary:
                    salary = "unknown"


                name=str(n)

                # fn=file_name[i]
                fn = data[value]
                fn = fn[i]

                fn = str(fn)
                if 'nan' in fn or 'NaN' in fn:
                    fn = "unknown"

                #set defalt email
                if 'unknown' in email:
                    email=lines[5].strip()
                    email = email.split("=")[1]
                    
                


                send_to=email
                # the message to be emailed
                z=self.ch_var(name,salary,position)
                

                

                # message = "Hey, "+name+ "  congratulation you are\npramoted to position\n" +position+ " and your salary is now "+str(salary)
                # create document object
               

                # save document
                user_name = name
                #email PDF file name
                
                # name = "output\\"+name
                z.save(self.output_folder_path+"//"+fn+"_"+str(i+2)+'.docx')
                filename = self.output_folder_path+"//"+fn+"_"+str(i+2)+".pdf"
                convert(self.output_folder_path+"//"+fn+"_"+str(i+2)+".docx", filename)
                print("pdf generation done")
                self.sendMail(filename,send_to,user_name)
                print("Mail sent: "+user_name)        
                print("waiting "+self.wait_time +" seconds")
                time.sleep(int(self.wait_time))
                print("cycle completed.************************")

            except Exception as e:
                print(e)

        print("Process completed.")

# iterate through the records
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    with open('Config_file.txt') as f:
        lines = f.readlines()
    
    title_name=lines[0].strip()
    title_name = title_name.split("=")[1]

    bg_color_set=lines[1].strip()
    bg_color_set = bg_color_set.split("=")[1]

    btn_color_set =  lines[2].strip()
    btn_color_set = btn_color_set.split("=")[1]

    mail_subject=lines[6].strip()
    mail_subject = mail_subject.split("=")[1]

    mail_body=lines[7].strip()
    mail_body=mail_body.split("=")[1]


    all_text_color=lines[8].strip()
    all_text_color=all_text_color.split("=")[1]

    send_button_text_color=lines[9].strip()
    send_button_text_color=send_button_text_color.split("=")[1]


    wait_time_in_sec=lines[10].strip()
    wait_time_in_sec=wait_time_in_sec.split("=")[1]

    ui.setupUi(MainWindow,btn_color_set,bg_color_set,title_name,mail_subject,mail_body,all_text_color,send_button_text_color,wait_time_in_sec)
    MainWindow.show()
    sys.exit(app.exec_())
